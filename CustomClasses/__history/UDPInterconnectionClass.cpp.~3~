//---------------------------------------------------------------------------
#include "UDPInterconnectionClass.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
//---------------------------------------------------------------------------
//Конструктор
TUDPInterconnection::TUDPInterconnection(TComponent* Owner)
{
	UDPClient = new TIdUDPClient;
    UDPClient->Name = "UDPClient";
    UDPClient->Active = false;
    UDPClient->BoundIP = "";
    UDPClient->BoundPort = 0;
    UDPClient->BoundPortMax = 0;
    UDPClient->BoundPortMin = 0;
    UDPClient->BroadcastEnabled = true;
    UDPClient->BufferSize = 8192;
    UDPClient->Host = "";
    UDPClient->IPVersion = Id_IPv4;
    //UDPClient->Port = 12001;     				Get from Registry
    UDPClient->ReceiveTimeout = -2;
    UDPClient->ReuseSocket = rsOSDependent;
    UDPClient->Tag = 0;

	UDPServer = new TIdUDPServer(Owner);
    UDPServer->Name = "UDPServer";
    UDPServer->Active = false;
    //TIdSocketHandle *IdSocketHandle = new TIdSocketHandle(Owner);
    //IdSocketHandle->IP = "0.0.0.0";
    //IdSocketHandle->Port =     		Get from Registry or by brute force
    //UDPServer->Bindings = IdSocketHandle;
    UDPServer->BroadcastEnabled = true;
    UDPServer->BufferSize = 8192;
    //UDPServer->DefaultPort =   		Get from Registry
    UDPServer->IPVersion = Id_IPv4;
    UDPServer->ReuseSocket = rsOSDependent;
    UDPServer->Tag = 0;
    UDPServer->ThreadedEvent = true;
}
//---------------------------------------------------------------------------
//Деструктор
TUDPInterconnection::~TUDPInterconnection()
{
	delete UDPClient;
    delete UDPServer;
}

